{"version":3,"file":"elementComponent.js","sources":["../../elements/elementComponent.tsx"],"sourcesContent":["import type {AssignableType, Type} from \"@co.mmons/js-utils/core\";\nimport {children, Component, ParentProps, splitProps} from \"solid-js\";\nimport {JSX} from \"solid-js/h/jsx-runtime\";\nimport {Dynamic} from \"solid-js/web\";\nimport {SetRequired} from \"type-fest\";\nimport {camelPropsToDashedAttrs} from \"./camelPropsToDashedAttrs\";\nimport {CustomElement} from \"./CustomElement\";\nimport {ElementEventsProps} from \"./ElementEventsProps\";\nimport {ElementProps} from \"./ElementProps\";\nimport {registerElement} from \"./registerElement\";\n\nexport type ElementComponent<TagName extends string, ElementType extends CustomElement, ComponentProps = any> = Component<JSX.HTMLAttributes<ElementType> & ComponentProps> & {\n    tagName: TagName;\n    events<Events extends {[EventName in keyof Events]: Event}>(): ElementComponent<TagName, ElementType, ComponentProps & ElementEventsProps<ElementType, Events>>;\n    required<PropName extends keyof ElementProps<ElementType>>(first: PropName, ...others: PropName[]): ElementComponent<TagName, ElementType, ComponentProps & SetRequired<ElementProps<ElementType>, PropName>>;\n}\n\nexport function elementComponent<TagName extends string, ElementType extends CustomElement>(tagName: TagName, elementType: AssignableType<ElementType>): ElementComponent<TagName, ElementType, Omit<ElementProps<ElementType>, keyof HTMLElement | keyof CustomElement>> {\n\n    registerElement(tagName, elementType);\n\n    const extendedType: Type<ElementType> & {__reactive: string[], __noShadow: boolean} = elementType as any;\n\n    const template: Component<any> = (rawProps: ParentProps<any>) => {\n        const elementChildren = children(() => rawProps.children);\n        const [, props, other] = splitProps(rawProps, [\"children\"], extendedType.__reactive ?? []);\n\n        return <Dynamic component={tagName as any} {...camelPropsToDashedAttrs(props)} {...other} __children={elementChildren.toArray()}>\n            {!extendedType.__noShadow && elementChildren}\n        </Dynamic>\n    }\n\n    const component = template as any as ElementComponent<TagName, ElementType, ElementProps<ElementType>>;\n    component[\"tagName\"] = tagName;\n    component[\"events\"] = () => component;\n    component[\"required\"] = () => component;\n\n    return component as any;\n}\n"],"names":["elementComponent","tagName","elementType","registerElement","extendedType","component","rawProps","elementChildren","children","props","other","splitProps","__reactive","_$createComponent","Dynamic","_$mergeProps","camelPropsToDashedAttrs","toArray","__noShadow"],"mappings":";;;;AAiBO,SAASA,EAA4EC,GAAkBC,GAA4J;AAEtQC,EAAAA,EAAgBF,GAASC,CAAW;AAEpC,QAAME,IAAgFF,GAWhFG,IAT4BC,CAAAA,MAA+B;AAC7D,UAAMC,IAAkBC,EAAS,MAAMF,EAASE,QAAQ,GAClD,GAAGC,GAAOC,CAAK,IAAIC,EAAWL,GAAU,CAAC,UAAU,GAAGF,EAAaQ,cAAc,CAAE,CAAA;AAEzF,WAAAC,EAAQC,GAAOC,EAAA;AAAA,MAAC,WAAWd;AAAAA,IAAO,GAAA,MAAae,EAAwBP,CAAK,GAAOC,GAAK;AAAA,MAAA,IAAE,aAAU;AAAA,eAAEH,EAAgBU;MAAS;AAAA,MAAA,IAAA,WAAA;AAAA,eAC1H,CAACb,EAAac,cAAcX;AAAAA,MAAe;AAAA,IAAA,CAAA,CAAA;AAAA;AAKpDF,SAAAA,EAAU,UAAaJ,GACvBI,EAAU,SAAY,MAAMA,GAC5BA,EAAU,WAAc,MAAMA,GAEvBA;AACX;"}