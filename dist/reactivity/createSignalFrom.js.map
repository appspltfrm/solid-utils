{"version":3,"file":"createSignalFrom.js","sources":["../../src/lib/reactivity/createSignalFrom.ts"],"sourcesContent":["import type {Observable, Subscription} from \"rxjs\";\nimport {Accessor, createSignal, getOwner, onCleanup, Setter, Signal} from \"solid-js\";\n\nexport type SignalFromObservable<T> = [...Signal<T>, Subscription];\n\ninterface InitialValueOption<T> {\n    value: T;\n}\n\nexport interface Options {\n    onError?: (error: any) => void | any;\n    autoUnsubscribe?: boolean;\n}\n\ninterface CreateSignalFromOption<T> extends Options, Partial<InitialValueOption<T>> {\n}\n\nexport function createSignalFrom<T = any>(observable: Observable<T>, options: InitialValueOption<T> & Options): SignalFromObservable<T>;\n\nexport function createSignalFrom<T = any>(observable: Observable<T>, options: CreateSignalFromOption<T | undefined>): SignalFromObservable<T | undefined>;\n\nexport function createSignalFrom<T = any>(observable: Observable<T>, options?: CreateSignalFromOption<T | undefined>): SignalFromObservable<T | undefined> {\n\n    const [value, setValue] = createSignal<T | undefined>(options?.value);\n\n    const subscription = observable.subscribe({\n        next: (v: T) => setValue(() => v),\n        error: (e: any) => options?.onError?.(e)\n    });\n\n    if (getOwner() && options?.autoUnsubscribe !== false) {\n        onCleanup(() => subscription.unsubscribe());\n    }\n\n    return [value, setValue, subscription];\n}\n"],"names":["createSignalFrom","observable","options","value","setValue","createSignal","subscription","v","e","_a","getOwner","onCleanup"],"mappings":";AAqBgB,SAAAA,EAA0BC,GAA2BC,GAAsF;AAEvJ,QAAM,CAACC,GAAOC,CAAQ,IAAIC,EAA4BH,KAAA,gBAAAA,EAAS,KAAK,GAE9DI,IAAeL,EAAW,UAAU;AAAA,IACtC,MAAM,CAACM,MAASH,EAAS,MAAMG,CAAC;AAAA,IAChC,OAAO,CAACC,MAAW;;AAAA,cAAAC,IAAAP,KAAA,gBAAAA,EAAS,YAAT,gBAAAO,EAAA,KAAAP,GAAmBM;AAAA;AAAA,EAAC,CAC1C;AAED,SAAIE,EAAS,MAAKR,KAAA,gBAAAA,EAAS,qBAAoB,MACjCS,EAAA,MAAML,EAAa,YAAA,CAAa,GAGvC,CAACH,GAAOC,GAAUE,CAAY;AACzC;"}