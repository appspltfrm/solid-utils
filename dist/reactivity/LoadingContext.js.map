{"version":3,"file":"LoadingContext.js","sources":["../../src/lib/reactivity/LoadingContext.ts"],"sourcesContent":["import {createSignal, Signal, untrack} from \"solid-js\";\nimport {setContext, getContext} from \"./context\";\n\nconst contextId = Symbol(\"@appspltfrm/solid-utils/LoadingContext\");\nconst mainId = Symbol(\"main\");\n\nexport interface LoadingContext {\n\n    /**\n     * Notify that main job started.\n     */\n    start(): this;\n\n    /**\n     * Notify that given job started.\n     */\n    start(jobId: string | symbol): this;\n\n    /**\n     * Notify that main job stopped.\n     */\n    stop(): this;\n\n    /**\n     * Notify that given job stopped.\n     */\n    stop(jobId: string | symbol): this;\n\n    /**\n     * Returns the number of jobs that are still working.\n     */\n    size(): number;\n\n    /**\n     * If there is any job that still loading.\n     */\n    busy(): boolean;\n\n    /**\n     * If the main job is loading.\n     */\n    main(): boolean;\n}\n\nclass LoadingContextImpl implements LoadingContext {\n\n    private jobs: Signal<Set<string | symbol>> = createSignal(new Set());\n\n    start(): this;\n\n    start(jobId: string | symbol): this;\n\n    start(): this {\n        const jobId: string | symbol = arguments.length === 1 ? arguments[0] : mainId;\n        const jobs = untrack(() => this.jobs[0]());\n        this.jobs[1](new Set(jobs.add(jobId ?? mainId)));\n        return this;\n    }\n\n    stop(): this\n\n    stop(jobId: string | symbol): this;\n\n    stop(): this {\n        const jobId: string | symbol = arguments.length === 1 ? arguments[0] : mainId;\n        const jobs = untrack(() => this.jobs[0]());\n        if (jobs.delete(jobId ?? mainId)) {\n            this.jobs[1](new Set(jobs));\n        }\n\n        return this;\n    }\n\n    size() {\n        return this.jobs[0]().size;\n    }\n\n    busy() {\n        return this.jobs[0]().size > 0;\n    }\n\n    main() {\n        return this.jobs[0]().has(mainId);\n    }\n}\n\nexport function createLoadingContext(): LoadingContext {\n    return setContext(contextId, new LoadingContextImpl());\n}\n\nexport function getLoadingContext() {\n    return getContext<LoadingContext>(contextId);\n}\n"],"names":["contextId","mainId","LoadingContextImpl","__publicField","createSignal","jobId","jobs","untrack","createLoadingContext","setContext","getLoadingContext","getContext"],"mappings":";;;;;AAGA,MAAMA,IAAY,OAAO,wCAAwC,GAC3DC,IAAS,OAAO,MAAM;AAwC5B,MAAMC,EAA6C;AAAA,EAAnD;AAEY,IAAAC,EAAA,cAAqCC,EAAiB,oBAAA,IAAA,CAAK;AAAA;AAAA,EAMnE,QAAc;AACV,UAAMC,IAAyB,UAAU,WAAW,IAAI,UAAU,CAAC,IAAIJ,GACjEK,IAAOC,EAAQ,MAAM,KAAK,KAAK,CAAC,GAAG;AACpC,gBAAA,KAAK,CAAC,EAAE,IAAI,IAAID,EAAK,IAAID,KAASJ,CAAM,CAAC,CAAC,GACxC;AAAA,EACX;AAAA,EAMA,OAAa;AACT,UAAMI,IAAyB,UAAU,WAAW,IAAI,UAAU,CAAC,IAAIJ,GACjEK,IAAOC,EAAQ,MAAM,KAAK,KAAK,CAAC,GAAG;AACzC,WAAID,EAAK,OAAOD,KAASJ,CAAM,KAC3B,KAAK,KAAK,CAAC,EAAE,IAAI,IAAIK,CAAI,CAAC,GAGvB;AAAA,EACX;AAAA,EAEA,OAAO;AACH,WAAO,KAAK,KAAK,CAAC,EAAA,EAAI;AAAA,EAC1B;AAAA,EAEA,OAAO;AACH,WAAO,KAAK,KAAK,CAAC,EAAA,EAAI,OAAO;AAAA,EACjC;AAAA,EAEA,OAAO;AACH,WAAO,KAAK,KAAK,CAAC,EAAE,EAAE,IAAIL,CAAM;AAAA,EACpC;AACJ;AAEO,SAASO,IAAuC;AACnD,SAAOC,EAAWT,GAAW,IAAIE,EAAoB,CAAA;AACzD;AAEO,SAASQ,IAAoB;AAChC,SAAOC,EAA2BX,CAAS;AAC/C;"}