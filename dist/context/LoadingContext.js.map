{"version":3,"file":"LoadingContext.js","sources":["../../src/lib/context/LoadingContext.ts"],"sourcesContent":["import {\n    createEffect,\n    createResource,\n    createSignal,\n    createUniqueId,\n    onCleanup,\n    Resource,\n    Signal,\n    untrack\n} from \"solid-js\";\nimport {setContext, getContext, createContext} from \"./context\";\nimport resourceFactory = LoadingContext.jobFactory;\n\nconst contextId = Symbol(\"@appspltfrm/solid-utils/LoadingContext\");\nconst mainId = Symbol(\"main\");\n\nexport interface LoadingContext {\n\n    /**\n     * Notify that main job started.\n     */\n    mainStart(): this;\n\n    start(job: Resource<any> | LoadingContext.JobFactory): this;\n\n    start(job: Promise<any>): this;\n\n    /**\n     * Notify that given job started.\n     */\n    start(jobId: string | symbol): this;\n\n    /**\n     * Notify that main job stopped.\n     */\n    mainStop(): this;\n\n    /**\n     * Notify that given job stopped.\n     */\n    stop(jobId: string | symbol): this;\n\n    /**\n     * Returns the number of jobs that are still working.\n     */\n    size(): number;\n\n    /**\n     * If there is any job that still loading.\n     */\n    busy(): boolean;\n\n    /**\n     * Returns list of busy jobs.\n     */\n    jobs(): Array<string | symbol>;\n\n    /**\n     * If the main job is loading.\n     */\n    mainBusy(): boolean;\n}\n\nclass LoadingContextImpl implements LoadingContext {\n\n    #jobs: Signal<Set<string | symbol>> = createSignal(new Set());\n\n    mainStart() {\n        return this.start(mainId)\n    }\n\n    start(job: string | symbol | Resource<any> | LoadingContext.JobFactory | Promise<any>): this {\n\n        let jobId: string | symbol | undefined;\n        let resource: Resource<any> | undefined;\n\n        if (job instanceof Promise) {\n            const [r] = createResource(() => job);\n            resource = r;\n        } else if ((job as LoadingContext.JobFactory)[LoadingContext.jobFactory]) {\n            resource = (job as LoadingContext.JobFactory)[LoadingContext.jobFactory]();\n        } else if (job && typeof job === \"object\") {\n            resource = job as unknown as Resource<any>;\n        } else {\n            jobId = job as string | symbol;\n        }\n\n        if (resource) {\n            const id = Symbol(`Resource ${createUniqueId()}`);\n            this.start(id);\n            createEffect(() => !resource.loading && this.stop(id));\n            onCleanup(() => this.stop(id));\n        } else if (jobId) {\n            const jobs = untrack(() => this.#jobs[0]());\n            this.#jobs[1](new Set(jobs.add(jobId)));\n        }\n\n        return this;\n    }\n\n    mainStop() {\n        return this.stop(mainId);\n    }\n\n    stop(jobId: string | symbol): this {\n        const jobs = untrack(() => this.#jobs[0]());\n        if (jobs.delete(jobId)) {\n            this.#jobs[1](new Set(jobs));\n        }\n\n        return this;\n    }\n\n    size() {\n        return this.#jobs[0]().size;\n    }\n\n    busy() {\n        return this.#jobs[0]().size > 0;\n    }\n\n    mainBusy() {\n        return this.#jobs[0]().has(mainId);\n    }\n\n    jobs(): Array<string | symbol> {\n        return [...this.#jobs[0]()]\n    }\n}\n\nexport namespace LoadingContext {\n\n    export const jobFactory = Symbol(\"LoadingContextJobFactory\");\n\n    export interface JobFactory<T = any> {\n        [jobFactory]: () => Resource<T>\n    }\n}\n\nexport function createLoadingContext(): LoadingContext {\n    return createContext(contextId, new LoadingContextImpl());\n}\n\nexport function getLoadingContext() {\n    return getContext<LoadingContext>(contextId);\n}\n"],"names":["contextId","mainId","LoadingContextImpl","__privateAdd","_jobs","createSignal","job","jobId","resource","createResource","LoadingContext","id","createUniqueId","createEffect","onCleanup","jobs","untrack","__privateGet","createLoadingContext","createContext","getLoadingContext","getContext"],"mappings":";;;;;;;AAaA,MAAMA,IAAY,OAAO,wCAAwC,GAC3DC,IAAS,OAAO,MAAM;;AAiD5B,MAAMC,EAA6C;AAAA,EAAnD;AAEI,IAAAC,EAAA,MAAAC,GAAsCC,EAAiB,oBAAA,KAAK;AAAA;AAAA,EAE5D,YAAY;AACD,WAAA,KAAK,MAAMJ,CAAM;AAAA,EAAA;AAAA,EAG5B,MAAMK,GAAuF;AAErF,QAAAC,GACAC;AAEJ,QAAIF,aAAe,SAAS;AACxB,YAAM,CAAC,CAAC,IAAIG,EAAe,MAAMH,CAAG;AACzB,MAAAE,IAAA;AAAA,IACH,MAAA,CAAAF,EAAkCI,EAAe,UAAU,IACvDF,IAAAF,EAAkCI,EAAe,UAAU,EAAE,IAClEJ,KAAO,OAAOA,KAAQ,WAClBE,IAAAF,IAEHC,IAAAD;AAGZ,QAAIE,GAAU;AACV,YAAMG,IAAK,OAAO,YAAYC,EAAA,CAAgB,EAAE;AAChD,WAAK,MAAMD,CAAE,GACbE,EAAa,MAAM,CAACL,EAAS,WAAW,KAAK,KAAKG,CAAE,CAAC,GACrDG,EAAU,MAAM,KAAK,KAAKH,CAAE,CAAC;AAAA,eACtBJ,GAAO;AACd,YAAMQ,IAAOC,EAAQ,MAAMC,EAAA,MAAKb,GAAM,CAAC,GAAG;AACrC,MAAAa,EAAA,MAAAb,GAAM,CAAC,EAAE,IAAI,IAAIW,EAAK,IAAIR,CAAK,CAAC,CAAC;AAAA,IAAA;AAGnC,WAAA;AAAA,EAAA;AAAA,EAGX,WAAW;AACA,WAAA,KAAK,KAAKN,CAAM;AAAA,EAAA;AAAA,EAG3B,KAAKM,GAA8B;AAC/B,UAAMQ,IAAOC,EAAQ,MAAMC,EAAA,MAAKb,GAAM,CAAC,GAAG;AACtC,WAAAW,EAAK,OAAOR,CAAK,KACjBU,EAAA,MAAKb,GAAM,CAAC,EAAE,IAAI,IAAIW,CAAI,CAAC,GAGxB;AAAA,EAAA;AAAA,EAGX,OAAO;AACH,WAAOE,EAAA,MAAKb,GAAM,CAAC,EAAI,EAAA;AAAA,EAAA;AAAA,EAG3B,OAAO;AACH,WAAOa,EAAA,MAAKb,GAAM,CAAC,IAAI,OAAO;AAAA,EAAA;AAAA,EAGlC,WAAW;AACP,WAAOa,EAAA,MAAKb,GAAM,CAAC,EAAE,EAAE,IAAIH,CAAM;AAAA,EAAA;AAAA,EAGrC,OAA+B;AAC3B,WAAO,CAAC,GAAGgB,EAAA,MAAKb,GAAM,CAAC,GAAG;AAAA,EAAA;AAElC;AA/DIA,IAAA;AAiEa,IAAAM;AAAA,CAAV,CAAUA,MAAV;AAEUA,EAAAA,EAAA,aAAa,OAAO,0BAA0B;AAAA,GAF9CA,MAAAA,IAAA,CAAA,EAAA;AASV,SAASQ,IAAuC;AACnD,SAAOC,EAAcnB,GAAW,IAAIE,GAAoB;AAC5D;AAEO,SAASkB,IAAoB;AAChC,SAAOC,EAA2BrB,CAAS;AAC/C;"}