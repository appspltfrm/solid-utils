{"version":3,"file":"LoadingContext.js","sources":["../../src/lib/context/LoadingContext.ts"],"sourcesContent":["import {createSignal, Signal, untrack} from \"solid-js\";\nimport {setContext, getContext, createContext} from \"./context\";\n\nconst contextId = Symbol(\"@appspltfrm/solid-utils/LoadingContext\");\nconst mainId = Symbol(\"main\");\n\nexport interface LoadingContext {\n\n    /**\n     * Notify that main job started.\n     */\n    mainStart(): this;\n\n    /**\n     * Notify that given job started.\n     */\n    start(jobId: string | symbol): this;\n\n    /**\n     * Notify that main job stopped.\n     */\n    mainStop(): this;\n\n    /**\n     * Notify that given job stopped.\n     */\n    stop(jobId: string | symbol): this;\n\n    /**\n     * Returns the number of jobs that are still working.\n     */\n    size(): number;\n\n    /**\n     * If there is any job that still loading.\n     */\n    busy(): boolean;\n\n    /**\n     * Returns list of busy jobs.\n     */\n    jobs(): Array<string | symbol>;\n\n    /**\n     * If the main job is loading.\n     */\n    mainBusy(): boolean;\n}\n\nclass LoadingContextImpl implements LoadingContext {\n\n    #jobs: Signal<Set<string | symbol>> = createSignal(new Set());\n\n    mainStart() {\n        return this.start(mainId)\n    }\n\n    start(jobId: string | symbol): this {\n        const jobs = untrack(() => this.#jobs[0]());\n        this.#jobs[1](new Set(jobs.add(jobId ?? mainId)));\n        return this;\n    }\n\n    mainStop() {\n        return this.stop(mainId);\n    }\n\n    stop(jobId: string | symbol): this {\n        const jobs = untrack(() => this.#jobs[0]());\n        if (jobs.delete(jobId ?? mainId)) {\n            this.#jobs[1](new Set(jobs));\n        }\n\n        return this;\n    }\n\n    size() {\n        return this.#jobs[0]().size;\n    }\n\n    busy() {\n        return this.#jobs[0]().size > 0;\n    }\n\n    mainBusy() {\n        return this.#jobs[0]().has(mainId);\n    }\n\n    jobs(): Array<string | symbol> {\n        return [...this.#jobs[0]()]\n    }\n}\n\nexport function createLoadingContext(): LoadingContext {\n    return createContext(contextId, new LoadingContextImpl());\n}\n\nexport function getLoadingContext() {\n    return getContext<LoadingContext>(contextId);\n}\n"],"names":["contextId","mainId","LoadingContextImpl","__privateAdd","_jobs","createSignal","jobId","jobs","untrack","__privateGet","createLoadingContext","createContext","getLoadingContext","getContext"],"mappings":";;;;;;;AAGA,MAAMA,IAAY,OAAO,wCAAwC,GAC3DC,IAAS,OAAO,MAAM;;AA6C5B,MAAMC,EAA6C;AAAA,EAAnD;AAEI,IAAAC,EAAA,MAAAC,GAAsCC,EAAiB,oBAAA,KAAK;AAAA;AAAA,EAE5D,YAAY;AACD,WAAA,KAAK,MAAMJ,CAAM;AAAA,EAAA;AAAA,EAG5B,MAAMK,GAA8B;AAChC,UAAMC,IAAOC,EAAQ,MAAMC,EAAA,MAAKL,GAAM,CAAC,GAAG;AACrC,WAAAK,EAAA,MAAAL,GAAM,CAAC,EAAE,IAAI,IAAIG,EAAK,IAAID,KAASL,CAAM,CAAC,CAAC,GACzC;AAAA,EAAA;AAAA,EAGX,WAAW;AACA,WAAA,KAAK,KAAKA,CAAM;AAAA,EAAA;AAAA,EAG3B,KAAKK,GAA8B;AAC/B,UAAMC,IAAOC,EAAQ,MAAMC,EAAA,MAAKL,GAAM,CAAC,GAAG;AAC1C,WAAIG,EAAK,OAAOD,KAASL,CAAM,KAC3BQ,EAAA,MAAKL,GAAM,CAAC,EAAE,IAAI,IAAIG,CAAI,CAAC,GAGxB;AAAA,EAAA;AAAA,EAGX,OAAO;AACH,WAAOE,EAAA,MAAKL,GAAM,CAAC,EAAI,EAAA;AAAA,EAAA;AAAA,EAG3B,OAAO;AACH,WAAOK,EAAA,MAAKL,GAAM,CAAC,IAAI,OAAO;AAAA,EAAA;AAAA,EAGlC,WAAW;AACP,WAAOK,EAAA,MAAKL,GAAM,CAAC,EAAE,EAAE,IAAIH,CAAM;AAAA,EAAA;AAAA,EAGrC,OAA+B;AAC3B,WAAO,CAAC,GAAGQ,EAAA,MAAKL,GAAM,CAAC,GAAG;AAAA,EAAA;AAElC;AAxCIA,IAAA;AA0CG,SAASM,IAAuC;AACnD,SAAOC,EAAcX,GAAW,IAAIE,GAAoB;AAC5D;AAEO,SAASU,IAAoB;AAChC,SAAOC,EAA2Bb,CAAS;AAC/C;"}