{"version":3,"file":"context.js","sources":["../../src/lib/context/context.ts"],"sourcesContent":["import {getOwner, onCleanup, Owner} from \"solid-js\";\n\ntype Vars = {[key: string | symbol]: any};\ntype VarName = string | symbol;\n\nconst allVars = new WeakMap<Owner, Vars>();\n\nclass VarValue {\n    value: any;\n    onDelete?: () => void;\n}\n\nfunction assertNotExists(vars: Vars | undefined, name: VarName) {\n    if (vars && name in vars) {\n        throw new Error(`Var ${String(name)} already exists`);\n    }\n}\n\nfunction assertExists(vars: Vars | undefined, name: VarName) {\n    if (vars && !(name in vars)) {\n        throw new Error(`Var ${String(name)} not exists`);\n    }\n}\n\nexport function createContext<T>(name: string | symbol, initialValue: T): T;\n\nexport function createContext<T>(name: string | symbol, initialValue?: T) {\n\n    const owner = getOwner();\n    if (!owner) {\n        throw new Error(\"No owner, cannot create context\");\n    }\n\n    let vars = allVars.get(owner);\n    assertNotExists(vars, name);\n\n    if (!vars) {\n        allVars.set(owner, vars = {});\n\n        onCleanup(() => allVars.delete(owner));\n    }\n\n    vars[name] = initialValue;\n\n    return initialValue;\n}\n\nexport function setContext<T>(name: string | symbol, value: T): T {\n\n    let owner = getOwner();\n    if (!owner) {\n        throw new Error(\"No owner, cannot set context\");\n    }\n\n    while (owner) {\n\n        const vars = allVars.get(owner);\n        if (vars) {\n            if (name in vars) {\n                vars[name] = value;\n                return value;\n            }\n        }\n\n        owner = owner.owner;\n    }\n\n    return value;\n}\n\nexport function getContext<T>(name: string | symbol): T | undefined {\n\n    let owner = getOwner();\n    if (!owner) {\n        console.warn(\"No owner, cannot create context\");\n    }\n\n    while (owner) {\n\n        const vars = allVars.get(owner);\n        if (vars) {\n            if (name in vars) {\n                return vars[name];\n            }\n        }\n\n        owner = owner.owner;\n    }\n}\n"],"names":["allVars","assertNotExists","vars","name","createContext","initialValue","owner","getOwner","onCleanup","setContext","value","getContext"],"mappings":";AAKA,MAAMA,wBAAc;AAOpB,SAASC,EAAgBC,GAAwBC,GAAe;AACxD,MAAAD,KAAQC,KAAQD;AAChB,UAAM,IAAI,MAAM,OAAO,OAAOC,CAAI,kBAAkB;AAE5D;AAUgB,SAAAC,EAAiBD,GAAuBE,GAAkB;AAEtE,QAAMC,IAAQC;AACd,MAAI,CAACD;AACK,UAAA,IAAI,MAAM,iCAAiC;AAGjD,MAAAJ,IAAOF,EAAQ,IAAIM,CAAK;AAC5B,SAAAL,EAAgBC,GAAMC,CAAI,GAErBD,MACDF,EAAQ,IAAIM,GAAOJ,IAAO,CAAE,CAAA,GAE5BM,EAAU,MAAMR,EAAQ,OAAOM,CAAK,CAAC,IAGzCJ,EAAKC,CAAI,IAAIE,GAENA;AACX;AAEgB,SAAAI,EAAcN,GAAuBO,GAAa;AAE9D,MAAIJ,IAAQC;AACZ,MAAI,CAACD;AACK,UAAA,IAAI,MAAM,8BAA8B;AAGlD,SAAOA,KAAO;AAEJ,UAAAJ,IAAOF,EAAQ,IAAIM,CAAK;AAC9B,QAAIJ,KACIC,KAAQD;AACR,aAAAA,EAAKC,CAAI,IAAIO,GACNA;AAIf,IAAAJ,IAAQA,EAAM;AAAA,EAClB;AAEO,SAAAI;AACX;AAEO,SAASC,EAAcR,GAAsC;AAEhE,MAAIG,IAAQC;AAKZ,OAJKD,KACD,QAAQ,KAAK,iCAAiC,GAG3CA,KAAO;AAEJ,UAAAJ,IAAOF,EAAQ,IAAIM,CAAK;AAC9B,QAAIJ,KACIC,KAAQD;AACR,aAAOA,EAAKC,CAAI;AAIxB,IAAAG,IAAQA,EAAM;AAAA,EAClB;AACJ;"}