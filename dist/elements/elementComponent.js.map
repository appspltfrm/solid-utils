{"version":3,"file":"elementComponent.js","sources":["../../src/lib/elements/elementComponent.tsx"],"sourcesContent":["import type {AssignableType, Type} from \"@co.mmons/js-utils/core\";\nimport {children, Component, ParentProps, sharedConfig, splitProps} from \"solid-js\";\nimport {JSX} from \"solid-js/h/jsx-runtime\";\nimport {Dynamic, getNextElement, spread} from \"solid-js/web\";\nimport {camelPropsToDashedAttrs} from \"./camelPropsToDashedAttrs\";\nimport {SolidElement} from \"./SolidElement\";\nimport {ElementAttrAttributes} from \"./ElementAttrAttributes\";\nimport {ElementEventsProps} from \"./ElementEventsProps\";\nimport {ElementProps} from \"./ElementProps\";\nimport {registerElement} from \"./registerElement\";\n\nexport type ElementComponent<TagName extends string, ElementType extends SolidElement, ComponentProps = any> = Component<ComponentProps & JSX.HTMLAttributes<ElementType> & ElementAttrAttributes> & {\n    tagName: TagName;\n    configure<Props = ComponentProps, Events extends {[P in keyof Events]: Event} = any>(): ElementComponent<TagName, ElementType, Props & ElementEventsProps<ElementType, Events>>;\n}\n\nexport function elementComponent<TagName extends string, ElementType extends SolidElement>(tagName: TagName, elementType: AssignableType<ElementType>): ElementComponent<TagName, ElementType, ElementProps<ElementType>> {\n\n    registerElement(tagName, elementType);\n\n    const extendedType: Type<ElementType> & {reactive: {[propName: string]: boolean}} = elementType as any;\n\n    const template: Component<any> = (rawProps: ParentProps<any>) => {\n        const rawChildren = children(() => rawProps.children);\n        const [, props, others] = splitProps(rawProps, [\"children\"], Object.keys(extendedType.reactive ?? {}));\n\n        const el = sharedConfig.context ? getNextElement() : document.createElement(tagName);\n        const noShadow = (el as any)[\"renderRoot\"] === el;\n\n        spread(el, {\n            ...camelPropsToDashedAttrs(props),\n            ...others,\n            children: (!noShadow && rawChildren) ?? [],\n            \"slotted-children\": (noShadow && rawChildren.toArray()) ?? []\n        }, false, noShadow);\n\n        return el;\n    }\n\n    const component = template as any as ElementComponent<TagName, ElementType, ElementProps<ElementType>>;\n    component[\"tagName\"] = tagName;\n    component[\"configure\"] = () => {\n        return component as any;\n    }\n\n    return component as any;\n}\n"],"names":["elementComponent","tagName","elementType","registerElement","extendedType","component","rawProps","rawChildren","children","props","others","splitProps","Object","keys","reactive","el","sharedConfig","context","getNextElement","document","createElement","noShadow","spread","camelPropsToDashedAttrs","toArray"],"mappings":";;;;AAgBO,SAASA,EAA2EC,GAAkBC,GAA6G;AAEtNC,EAAAA,EAAgBF,GAASC,CAAW;AAEpC,QAAME,IAA8EF,GAmB9EG,IAjB4BC,CAAAA,MAA+B;AAC7D,UAAMC,IAAcC,EAAS,MAAMF,EAASE,QAAQ,GAC9C,CAAGC,EAAAA,GAAOC,CAAM,IAAIC,EAAWL,GAAU,CAAC,UAAU,GAAGM,OAAOC,KAAKT,EAAaU,YAAY,CAAA,CAAE,CAAC,GAE/FC,IAAKC,EAAaC,UAAUC,EAAgB,IAAGC,SAASC,cAAcnB,CAAO,GAC7EoB,IAAYN,EAAW,eAAkBA;AAE/CO,WAAAA,EAAOP,GAAI;AAAA,MACP,GAAGQ,EAAwBd,CAAK;AAAA,MAChC,GAAGC;AAAAA,MACHF,WAAW,CAACa,KAAYd,MAAgB,CAAE;AAAA,MAC1C,qBAAqBc,KAAYd,EAAYiB,QAAS,MAAK,CAAA;AAAA,IAC/D,GAAG,IAAOH,CAAQ,GAEXN;AAAAA;AAIXV,SAAAA,EAAU,UAAaJ,GACvBI,EAAU,YAAe,MACdA,GAGJA;AACX;"}