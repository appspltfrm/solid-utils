{"version":3,"file":"registerElement.js","sources":["../../src/lib/elements/registerElement.tsx"],"sourcesContent":["import {AssignableType} from \"@co.mmons/js-utils/core\";\nimport {compose, ICustomElement, noShadowDOM, register} from \"component-register\";\nimport {getCurrentElement, withSolid} from \"solid-element\";\nimport {splitProps} from \"solid-js\";\nimport {SolidElement} from \"./SolidElement\";\n\nexport function registerElement<ElementType extends SolidElement>(tagName: string, elementConstructor: AssignableType<ElementType>) {\n\n    if (customElements.get(tagName)) {\n        return;\n    }\n\n    const extendedConstructor: {reactive: {[propName: string]: boolean}, __shadowStyles: string | string[]} = elementConstructor as any;\n\n    const propsDefinitions: {[propName: string]: {\n            value: undefined;\n            attribute: string;\n            notify: boolean;\n            reflect: boolean;\n            parse: boolean;\n        }} = {slottedChildren: undefined as any};\n\n    for (const propName of Object.keys(extendedConstructor.reactive ?? {})) {\n        propsDefinitions[propName] = Object.assign({value: undefined});\n    }\n\n    const connectedCallback = elementConstructor.prototype.connectedCallback;\n    const disconnectedCallback = elementConstructor.prototype.disconnectedCallback;\n\n    const finalConstructor = compose(register(tagName, propsDefinitions, {BaseElement: elementConstructor}), withSolid)((rawProps) => {\n\n        const shadowStyles = extendedConstructor.__shadowStyles;\n        const [children, props] = splitProps(rawProps, [\"slottedChildren\"]);\n        const element = getCurrentElement() as any as SolidElement & ICustomElement;\n\n        if (!element.renderRoot) {\n            Object.defineProperty(element, \"renderRoot\", {value: element.shadowRoot || element.attachShadow({mode: \"open\"})});\n        }\n\n        if (connectedCallback) {\n            connectedCallback.call(element);\n        }\n\n        if (disconnectedCallback) {\n            element.addReleaseCallback(() => disconnectedCallback.call(element));\n        }\n\n        return <>\n            {element.renderRoot === element.shadowRoot && shadowStyles && (typeof shadowStyles === \"string\" ? [shadowStyles] : shadowStyles).map(style => <style>{style}</style>)}\n            {element[\"template\"]({props, children: children?.[\"slottedChildren\"] ?? []})}\n        </>\n    });\n}\n"],"names":["registerElement","tagName","elementConstructor","customElements","get","extendedConstructor","propsDefinitions","slottedChildren","undefined","propName","Object","keys","reactive","assign","value","connectedCallback","prototype","disconnectedCallback","compose","register","BaseElement","withSolid","rawProps","shadowStyles","__shadowStyles","children","props","splitProps","element","getCurrentElement","renderRoot","defineProperty","shadowRoot","attachShadow","mode","call","addReleaseCallback","_$memo","_c$","map","style","_el$","_tmpl$","_$insert"],"mappings":";;;;;AAMO,SAASA,EAAkDC,GAAiBC,GAAiD;AAEhI,MAAIC,eAAeC,IAAIH,CAAO;AAC1B;AAGJ,QAAMI,IAAoGH,GAEpGI,IAMG;AAAA,IAACC,iBAAiBC;AAAAA;AAE3B,aAAWC,KAAYC,OAAOC,KAAKN,EAAoBO,YAAY,CAAA,CAAE;AACjEN,IAAAA,EAAiBG,CAAQ,IAAIC,OAAOG,OAAO;AAAA,MAACC,OAAON;AAAAA,IAAS,CAAC;AAGjE,QAAMO,IAAoBb,EAAmBc,UAAUD,mBACjDE,IAAuBf,EAAmBc,UAAUC;AAEjCC,EAAAA,EAAQC,EAASlB,GAASK,GAAkB;AAAA,IAACc,aAAalB;AAAAA,EAAkB,CAAC,GAAGmB,CAAS,EAAGC,CAAAA,MAAa;AAE9H,UAAMC,IAAelB,EAAoBmB,gBACnC,CAACC,GAAUC,CAAK,IAAIC,EAAWL,GAAU,CAAC,iBAAiB,CAAC,GAC5DM,IAAUC;AAEhB,WAAKD,EAAQE,cACTpB,OAAOqB,eAAeH,GAAS,cAAc;AAAA,MAACd,OAAOc,EAAQI,cAAcJ,EAAQK,aAAa;AAAA,QAACC,MAAM;AAAA,OAAO;AAAA,IAAC,CAAC,GAGhHnB,KACAA,EAAkBoB,KAAKP,CAAO,GAG9BX,KACAW,EAAQQ,mBAAmB,MAAMnB,EAAqBkB,KAAKP,CAAO,CAAC,GAGvE,CAAAS,GAAA,MAAA;AAAA,YACKT,IAAAA,EAAAA,MAAAA,CAAAA,EAAAA,EAAQE,eAAeF,EAAQI,cAAcT,EAAY;AAAA,aAAA,MAAzDe,EAA6D,MAAC,OAAOf,KAAiB,WAAW,CAACA,CAAY,IAAIA,GAAcgB,IAAIC,CAAAA,OAAK,MAAA;AAAA,cAAAC,IAAAC,EAAA,UAAA,EAAA;AAAAC,eAAAA,EAAAF,GAAYD,CAAK,GAAAC;AAAA,MAAA,GAAA,CAAS;AAAA,IAAC,GAAA,CAAA,GAAAJ,EAAA,MACpKT,EAAQ,SAAY;AAAA,MAACF,OAAAA;AAAAA,MAAOD,WAAUA,KAAAA,gBAAAA,EAAW,oBAAsB,CAAA;AAAA,IAAG,CAAA,CAAC,CAAA;AAAA,EAEpF,CAAC;AACL;"}